@using System.Text.Json
@using FxExpert.Blazor.Client.Models
@using FxExpert.Blazor.Client.Services
@using Fortium.Types
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject FilterService FilterService

<div class="partner-filter-container">
    @if (_isDesktop)
    {
        <!-- Desktop Sidebar -->
        <MudPaper Class="filter-sidebar pa-4" Style="width: 300px; height: fit-content; position: sticky; top: 20px;">
            @RenderFilterContent()
        </MudPaper>
    }
    else
    {
        <!-- Mobile Bottom Drawer -->
        <MudDrawer @bind-Open="_mobileDrawerOpen" 
                   Anchor="Anchor.Bottom" 
                   Height="70vh" 
                   ClipMode="DrawerClipMode.Always"
                   Variant="DrawerVariant.Temporary">
            <div class="pa-4">
                @RenderFilterContent()
            </div>
        </MudDrawer>
        
        <!-- Mobile Filter Button -->
        <MudFab Color="Color.Primary" 
               Icon="@Icons.Material.Filled.FilterList"
               OnClick="@(() => _mobileDrawerOpen = true)"
               Style="position: fixed; bottom: 80px; right: 20px; z-index: 1000;"
               aria-label="Open filter options">
            @if (_activeFilterCount > 0)
            {
                <MudBadge Content="@_activeFilterCount" 
                         Color="Color.Error" 
                         Origin="Origin.TopRight"
                         Style="position: absolute; top: -8px; right: -8px;" />
            }
        </MudFab>
    }
</div>

<style>
    .partner-filter-container {
        position: relative;
    }
    
    .filter-sidebar {
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        border-radius: 8px;
    }
    
    @@media (max-width: 960px) {
        .filter-sidebar {
            display: none;
        }
    }
    
    .mud-expansion-panel .mud-expand-panel-text {
        font-weight: 500;
    }
    
    .partner-filter-container * {
        transition: all 200ms ease-in-out;
    }
    
    .mud-input-control:focus-within {
        box-shadow: 0 0 0 2px var(--mud-palette-primary);
    }
</style>

@code {
    #pragma warning disable CS8618

    [Parameter] public List<Partner> Partners { get; set; } = new();
    [Parameter] public EventCallback<List<Partner>> OnFiltersChanged { get; set; }
    [Parameter] public EventCallback<PartnerFilterCriteria> OnFilterCriteriaChanged { get; set; }

    // State management
    private bool _isDesktop = true;
    private bool _mobileDrawerOpen = false;
    private int _activeFilterCount = 0;
    private int _filteredCount = 0;
    private int _activeLocationFilters = 0;
    private int _activeSkillsFilters = 0;
    
    // Filter values
    private string? _selectedCity;
    private string? _selectedState;
    private IEnumerable<string> _selectedRegions = new HashSet<string>();
    private AvailabilityTimeframe? _selectedAvailability;
    private IEnumerable<string> _selectedSkills = new HashSet<string>();
    private IEnumerable<string> _quickSelectSkills = new HashSet<string>();
    private ExperienceLevel? _minExperienceLevel;
    private int _minYearsExperience = 0;
    private IEnumerable<string> _technicalSkills = new HashSet<string>();
    private IEnumerable<string> _leadershipSkills = new HashSet<string>();
    private IEnumerable<string> _industrySkills = new HashSet<string>();
    
    // Data sources
    private List<StateInfo> _availableStates = new();
    private List<string> _availableCities = new();
    private List<string> _availableSkills = new();

    protected override async Task OnInitializedAsync()
    {
        await DetectScreenSize();
        InitializeDataSources();
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Partners.Any())
        {
            _filteredCount = Partners.Count;
            UpdateDataSources();
        }
    }

    private async Task DetectScreenSize()
    {
        try
        {
            var windowWidth = await JSRuntime.InvokeAsync<int>("window.innerWidth");
            _isDesktop = windowWidth > 960;
        }
        catch
        {
            _isDesktop = true;
        }
    }

    private void InitializeDataSources()
    {
        _availableStates = FilterService.GetAvailableStates(Partners);
        UpdateDataSources();
    }

    private async void UpdateDataSources()
    {
        _availableCities = await FilterService.SearchCitiesAsync(Partners, null, 1000);
        _availableSkills = await FilterService.SearchSkillsAsync(Partners, null, 1000);
    }

    private async Task<IEnumerable<string>> SearchCities(string value, CancellationToken cancellationToken = default)
    {
        var cities = await FilterService.SearchCitiesAsync(Partners, value, 10);
        return cities;
    }

    private async Task<IEnumerable<string>> SearchSkills(string value, CancellationToken cancellationToken = default)
    {
        var skills = await FilterService.SearchSkillsAsync(Partners, value, 15);
        return skills;
    }

    private void OnCityChanged(string? city)
    {
        _selectedCity = city;
        UpdateFilterCounts();
        _ = ApplyFilters();
    }

    private void UpdateFilterCounts()
    {
        _activeLocationFilters = 0;
        if (!string.IsNullOrEmpty(_selectedCity)) _activeLocationFilters++;
        if (!string.IsNullOrEmpty(_selectedState)) _activeLocationFilters++;
        if (_selectedRegions.Any()) _activeLocationFilters++;

        _activeSkillsFilters = 0;
        if (_selectedSkills.Any() || _quickSelectSkills.Any()) _activeSkillsFilters++;
        if (_minExperienceLevel.HasValue) _activeSkillsFilters++;
        if (_minYearsExperience > 0) _activeSkillsFilters++;
        if (_technicalSkills.Any() || _leadershipSkills.Any() || _industrySkills.Any()) _activeSkillsFilters++;

        _activeFilterCount = _activeLocationFilters + 
                           (_selectedAvailability.HasValue ? 1 : 0) + 
                           _activeSkillsFilters;
    }

    private async Task ApplyFilters()
    {
        var criteria = BuildFilterCriteria();
        var filteredPartners = await FilterPartners(criteria);
        
        _filteredCount = filteredPartners.Count;
        UpdateFilterCounts();
        
        await OnFiltersChanged.InvokeAsync(filteredPartners);
        await OnFilterCriteriaChanged.InvokeAsync(criteria);
        
        StateHasChanged();
    }

    private PartnerFilterCriteria BuildFilterCriteria()
    {
        var allSelectedSkills = new List<string>();
        allSelectedSkills.AddRange(_selectedSkills);
        allSelectedSkills.AddRange(_quickSelectSkills);
        allSelectedSkills.AddRange(_technicalSkills);
        allSelectedSkills.AddRange(_leadershipSkills);
        allSelectedSkills.AddRange(_industrySkills);
        
        return new PartnerFilterCriteria
        {
            Cities = !string.IsNullOrEmpty(_selectedCity) ? new List<string> { _selectedCity } : null,
            States = !string.IsNullOrEmpty(_selectedState) ? new List<string> { _selectedState } : null,
            Regions = _selectedRegions.Any() ? _selectedRegions.ToList() : null,
            Availability = _selectedAvailability,
            RequiredSkills = allSelectedSkills.Distinct().ToList(),
            MinExperienceLevel = _minExperienceLevel,
            MinYearsExperience = _minYearsExperience > 0 ? _minYearsExperience : null
        };
    }

    private async Task<List<Partner>> FilterPartners(PartnerFilterCriteria criteria)
    {
        return await FilterService.FilterPartnersAsync(Partners, criteria);
    }

    private async Task ClearAllFilters()
    {
        _selectedCity = null;
        _selectedState = null;
        _selectedRegions = new HashSet<string>();
        _selectedAvailability = null;
        _selectedSkills = new HashSet<string>();
        _quickSelectSkills = new HashSet<string>();
        _minExperienceLevel = null;
        _minYearsExperience = 0;
        _technicalSkills = new HashSet<string>();
        _leadershipSkills = new HashSet<string>();
        _industrySkills = new HashSet<string>();
        
        await ApplyFilters();
        _mobileDrawerOpen = false;
    }

    private RenderFragment RenderFilterContent() => __builder =>
    {
        <div role="region" aria-label="Partner search filters">
            <!-- Filter Header -->
            <MudStack Direction="Row" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
                <MudText Typo="Typo.h6">
                    <MudIcon Icon="@Icons.Material.Filled.FilterList" Class="mr-2" />
                    Filter Results
                </MudText>
                @if (_activeFilterCount > 0)
                {
                    <MudChip T="string" Color="Color.Primary" Size="Size.Small">
                        @_filteredCount results
                    </MudChip>
                }
            </MudStack>
            
            <!-- Active Filters Summary -->
            @if (_activeFilterCount > 0)
            {
                <MudPaper Class="pa-3 mb-3" 
                          Style="background-color: var(--mud-palette-info-lighten); border-radius: 8px;">
                    <MudStack Direction="Row" Spacing="1" Wrap="Wrap.Wrap" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.caption" Class="align-self-center">
                            <strong>Active Filters:</strong>
                        </MudText>
                        @RenderActiveFilterChips()
                    </MudStack>
                    
                    <MudButton Size="Size.Small" 
                             Color="Color.Error" 
                             Variant="Variant.Text"
                             OnClick="ClearAllFilters"
                             StartIcon="@Icons.Material.Filled.Clear"
                             Class="mt-2">
                        Clear All Filters
                    </MudButton>
                </MudPaper>
            }
            
            <!-- Basic Filters -->
            <MudExpansionPanels>
                <!-- Location Filter -->
                <MudExpansionPanel Text="📍 Location" IsInitiallyExpanded="@(_activeLocationFilters > 0)">
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudAutocomplete T="string" 
                                           Label="City" 
                                           SearchFunc="SearchCities"
                                           Value="_selectedCity"
                                           ValueChanged="OnCityChanged"
                                           Variant="Variant.Outlined"
                                           Clearable="true"
                                           aria-label="Filter by city"
                                           HelperText="Type to search cities" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudSelect T="string" 
                                     Label="State" 
                                     @bind-Value="_selectedState"
                                     Variant="Variant.Outlined"
                                     Clearable="true"
                                     aria-label="Filter by state">
                                @foreach (var state in _availableStates)
                                {
                                    <MudSelectItem Value="@state.Code">@state.Name (@state.Code)</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                </MudExpansionPanel>
                
                <!-- Skills Filter -->
                <MudExpansionPanel Text="🎯 Skills & Experience" IsInitiallyExpanded="@(_activeSkillsFilters > 0)">
                    <MudStack Spacing="3">
                        <MudAutocomplete T="string"
                                       Label="Search Skills"
                                       SearchFunc="SearchSkills"
                                       MultiSelection="true"
                                       @bind-SelectedValues="_selectedSkills"
                                       Variant="Variant.Outlined"
                                       Clearable="true"
                                       aria-label="Search and select required skills"
                                       HelperText="Partners must have ALL selected skills" />
                    </MudStack>
                </MudExpansionPanel>
            </MudExpansionPanels>
            
            <!-- Action Buttons -->
            <MudStack Direction="Row" Justify="Justify.SpaceBetween" Class="mt-4">
                <MudButton Variant="Variant.Outlined" 
                         OnClick="ClearAllFilters"
                         Disabled="@(_activeFilterCount == 0)"
                         StartIcon="@Icons.Material.Filled.Refresh">
                    Reset
                </MudButton>
                <MudButton Variant="Variant.Filled" 
                         Color="Color.Primary" 
                         OnClick="ApplyFilters"
                         StartIcon="@Icons.Material.Filled.Search">
                    Apply Filters
                </MudButton>
            </MudStack>
        </div>
    };

    private RenderFragment RenderActiveFilterChips() => __builder =>
    {
        @if (!string.IsNullOrEmpty(_selectedCity))
        {
            <MudChip T="string" Color="Color.Info" Size="Size.Small" OnClose="@(() => { _selectedCity = null; _ = ApplyFilters(); })">
                📍 @_selectedCity
            </MudChip>
        }
        @if (!string.IsNullOrEmpty(_selectedState))
        {
            <MudChip T="string" Color="Color.Info" Size="Size.Small" OnClose="@(() => { _selectedState = null; _ = ApplyFilters(); })">
                📍 @_selectedState
            </MudChip>
        }
        @foreach (var skill in _selectedSkills.Take(3))
        {
            <MudChip T="string" Color="Color.Primary" Size="Size.Small" OnClose="@(() => RemoveSkill(skill))">
                🎯 @skill
            </MudChip>
        }
    };

    private void RemoveSkill(string skill)
    {
        _selectedSkills = _selectedSkills.Where(s => s != skill);
        _ = ApplyFilters();
    }

    #pragma warning restore CS8618
}