@using System.Text.Json
@using FxExpert.Blazor.Client.Models
@using FxExpert.Blazor.Client.Services
@using Fortium.Types
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject FilterService FilterService

<div class="partner-filter-container">
    @if (_isDesktop)
    {
        <!-- Desktop Sidebar -->
        <MudPaper Class="filter-sidebar pa-4" Style="width: 300px; height: fit-content; position: sticky; top: 20px;">
            @GetFilterContent()
        </MudPaper>
    }
    else
    {
        <!-- Mobile Bottom Drawer -->
        <MudDrawer @bind-Open="_mobileDrawerOpen" 
                   Anchor="Anchor.Bottom" 
                   Height="70vh" 
                   ClipMode="DrawerClipMode.Always"
                   Variant="DrawerVariant.Temporary">
            <div class="pa-4">
                @GetFilterContent()
            </div>
        </MudDrawer>
        
        <!-- Mobile Filter Button -->
        <MudFab Color="Color.Primary" 
               Icon="@Icons.Material.Filled.FilterList"
               OnClick="@(() => _mobileDrawerOpen = true)"
               Style="position: fixed; bottom: 80px; right: 20px; z-index: 1000;"
               aria-label="Open filter options">
            @if (_activeFilterCount > 0)
            {
                <MudBadge Content="@_activeFilterCount" 
                         Color="Color.Error" 
                         Origin="Origin.TopRight"
                         Style="position: absolute; top: -8px; right: -8px;" />
            }
        </MudFab>
    }
</div>

<style>
    .partner-filter-container {
        position: relative;
    }
    
    .filter-sidebar {
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        border-radius: 8px;
    }
    
    @@media (max-width: 960px) {
        .filter-sidebar {
            display: none;
        }
    }
    
    .mud-expansion-panel .mud-expand-panel-text {
        font-weight: 500;
    }
    
    /* Smooth transitions for filter changes */
    .partner-filter-container * {
        transition: all 200ms ease-in-out;
    }
    
    /* Focus styles for accessibility */
    .mud-input-control:focus-within {
        box-shadow: 0 0 0 2px var(--mud-palette-primary);
    }
</style>

@code {
    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor

    [Parameter] public List<Partner> Partners { get; set; } = new();
    [Parameter] public EventCallback<List<Partner>> OnFiltersChanged { get; set; }
    [Parameter] public EventCallback<PartnerFilterCriteria> OnFilterCriteriaChanged { get; set; }

    // State management
    private bool _isDesktop = true;
    private bool _mobileDrawerOpen = false;
    private int _activeFilterCount = 0;
    private int _filteredCount = 0;
    private int _activeLocationFilters = 0;
    private int _activeSkillsFilters = 0;
    
    // Filter values
    private string? _selectedCity;
    private string? _selectedState;
    private IEnumerable<string> _selectedRegions = new HashSet<string>();
    private AvailabilityTimeframe? _selectedAvailability;
    private IEnumerable<string> _selectedSkills = new HashSet<string>();
    private IEnumerable<string> _quickSelectSkills = new HashSet<string>();
    private ExperienceLevel? _minExperienceLevel;
    private int _minYearsExperience = 0;
    private IEnumerable<string> _technicalSkills = new HashSet<string>();
    private IEnumerable<string> _leadershipSkills = new HashSet<string>();
    private IEnumerable<string> _industrySkills = new HashSet<string>();
    
    // Data sources
    private List<StateInfo> _availableStates = new();
    private List<string> _availableCities = new();
    private List<string> _availableSkills = new();

    private RenderFragment GetFilterContent() => @<div role="region" aria-label="Partner search filters">
        <!-- Filter Header -->
        <MudStack Direction="Row" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.FilterList" Class="mr-2" />
                Filter Results
            </MudText>
            @if (_activeFilterCount > 0)
            {
                <MudChip T="string" Color="Color.Primary" Size="Size.Small">
                    @_filteredCount results
                </MudChip>
            }
        </MudStack>
        
        <!-- Active Filters Summary -->
        @if (_activeFilterCount > 0)
        {
            <MudPaper Class="pa-3 mb-3" 
                      Style="background-color: var(--mud-palette-info-lighten); border-radius: 8px;">
                <MudStack Direction="Row" Spacing="1" Wrap="Wrap.Wrap" AlignItems="AlignItems.Center">
                    <MudText Typo="Typo.caption" Class="align-self-center">
                        <strong>Active Filters:</strong>
                    </MudText>
                    @RenderActiveFilterChips()
                </MudStack>
                
                <MudButton Size="Size.Small" 
                         Color="Color.Error" 
                         Variant="Variant.Text"
                         OnClick="ClearAllFilters"
                         StartIcon="@Icons.Material.Filled.Clear"
                         Class="mt-2">
                    Clear All Filters
                </MudButton>
            </MudPaper>
        }
        
        <!-- Filter Panels -->
        <MudExpansionPanels>
            <!-- Location Filter -->
            <MudExpansionPanel Text="📍 Location" IsInitiallyExpanded="@(_activeLocationFilters > 0)">
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudAutocomplete T="string" 
                                       Label="City" 
                                       SearchFunc="SearchCities"
                                       Value="_selectedCity"
                                       ValueChanged="OnCityChanged"
                                       Variant="Variant.Outlined"
                                       Clearable="true"
                                       aria-label="Filter by city"
                                       HelperText="Type to search cities" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudSelect T="string" 
                                 Label="State" 
                                 @bind-Value="_selectedState"
                                 Variant="Variant.Outlined"
                                 Clearable="true"
                                 aria-label="Filter by state">
                            @foreach (var state in _availableStates)
                            {
                                <MudSelectItem Value="@state.Code">@state.Name (@state.Code)</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText Typo="Typo.subtitle2" Class="mb-2">Region</MudText>
                        <MudChipSet MultiSelection="true" 
                                   @bind-SelectedValues="_selectedRegions"
                                   Filter="true"
                                   aria-label="Filter by region">
                            <MudChip T="string" Text="West Coast" Value="west-coast" Color="Color.Info" />
                            <MudChip T="string" Text="East Coast" Value="east-coast" Color="Color.Info" />
                            <MudChip T="string" Text="Midwest" Value="midwest" Color="Color.Info" />
                            <MudChip T="string" Text="South" Value="south" Color="Color.Info" />
                            <MudChip T="string" Text="Other" Value="other" Color="Color.Info" />
                        </MudChipSet>
                    </MudItem>
                </MudGrid>
            </MudExpansionPanel>
            
            <!-- Availability Filter -->
            <MudExpansionPanel Text="📅 Availability" IsInitiallyExpanded="@(_selectedAvailability.HasValue)">
                <MudRadioGroup T="AvailabilityTimeframe?" 
                             @bind-Value="_selectedAvailability"
                             aria-label="Filter by availability timeframe">
                    <MudRadio T="AvailabilityTimeframe?" Option="@AvailabilityTimeframe.ThisWeek" Color="Color.Success">
                        <MudStack Direction="Row" Spacing="2" AlignItems="AlignItems.Center">
                            <MudIcon Icon="@Icons.Material.Filled.Today" Color="Color.Success" Size="Size.Small" />
                            <div>
                                <MudText>This Week</MudText>
                                <MudText Typo="Typo.caption">Available in 1-7 days</MudText>
                            </div>
                        </MudStack>
                    </MudRadio>
                    <MudRadio T="AvailabilityTimeframe?" Option="@AvailabilityTimeframe.NextWeek" Color="Color.Info">
                        <MudStack Direction="Row" Spacing="2" AlignItems="AlignItems.Center">
                            <MudIcon Icon="@Icons.Material.Filled.DateRange" Color="Color.Info" Size="Size.Small" />
                            <div>
                                <MudText>Next Week</MudText>
                                <MudText Typo="Typo.caption">Available in 8-14 days</MudText>
                            </div>
                        </MudStack>
                    </MudRadio>
                    <MudRadio T="AvailabilityTimeframe?" Option="@AvailabilityTimeframe.ThisMonth" Color="Color.Warning">
                        <MudStack Direction="Row" Spacing="2" AlignItems="AlignItems.Center">
                            <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" Color="Color.Warning" Size="Size.Small" />
                            <div>
                                <MudText>This Month</MudText>
                                <MudText Typo="Typo.caption">Available in 1-30 days</MudText>
                            </div>
                        </MudStack>
                    </MudRadio>
                    <MudRadio T="AvailabilityTimeframe?" Option="@((AvailabilityTimeframe?)null)">
                        <MudStack Direction="Row" Spacing="2" AlignItems="AlignItems.Center">
                            <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Small" />
                            <MudText>Any Availability</MudText>
                        </MudStack>
                    </MudRadio>
                </MudRadioGroup>
                
                <MudDivider Class="my-3" />
                
                <MudText Typo="Typo.caption" Class="mb-2" Style="color: var(--mud-palette-text-secondary);">
                    <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" Class="mr-1" />
                    Availability is checked in real-time based on partner calendars
                </MudText>
            </MudExpansionPanel>
            
            <!-- Skills Filter -->
            <MudExpansionPanel Text="🎯 Skills & Experience" IsInitiallyExpanded="@(_activeSkillsFilters > 0)">
                <MudStack Spacing="3">
                    <!-- Skills Search -->
                    <MudAutocomplete T="string"
                                   Label="Search Skills"
                                   SearchFunc="SearchSkills"
                                   MultiSelection="true"
                                   @bind-SelectedValues="_selectedSkills"
                                   Variant="Variant.Outlined"
                                   Clearable="true"
                                   aria-label="Search and select required skills"
                                   HelperText="Partners must have ALL selected skills" />
                    
                    <!-- Popular Skills Quick Select -->
                    <div>
                        <MudText Typo="Typo.subtitle2" Class="mb-2">Popular Skills</MudText>
                        <MudChipSet MultiSelection="true" 
                                   @bind-SelectedValues="_quickSelectSkills"
                                   Filter="true"
                                   aria-label="Quick select popular skills">
                            <MudChip T="string" Text="Cloud Architecture" Value="Cloud Architecture" />
                            <MudChip T="string" Text="Cybersecurity" Value="Cybersecurity" />
                            <MudChip T="string" Text="Digital Transformation" Value="Digital Transformation" />
                            <MudChip T="string" Text="Data Strategy" Value="Data Strategy" />
                            <MudChip T="string" Text="IT Governance" Value="IT Governance" />
                            <MudChip T="string" Text="Enterprise Architecture" Value="Enterprise Architecture" />
                            <MudChip T="string" Text="Strategic Planning" Value="Strategic Planning" />
                            <MudChip T="string" Text="Team Leadership" Value="Team Leadership" />
                        </MudChipSet>
                    </div>
                    
                    <!-- Experience Level -->
                    <MudSelect T="ExperienceLevel?" 
                             @bind-Value="_minExperienceLevel"
                             Label="Minimum Experience Level"
                             Variant="Variant.Outlined"
                             Clearable="true"
                             aria-label="Filter by minimum experience level">
                        <MudSelectItem Value="ExperienceLevel.Novice">
                            <MudStack Direction="Row" Spacing="2" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.FiberNew" Size="Size.Small" />
                                <MudText>Novice (Learning)</MudText>
                            </MudStack>
                        </MudSelectItem>
                        <MudSelectItem Value="ExperienceLevel.Beginner">
                            <MudStack Direction="Row" Spacing="2" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Size="Size.Small" />
                                <MudText>Beginner (1-3 years)</MudText>
                            </MudStack>
                        </MudSelectItem>
                        <MudSelectItem Value="ExperienceLevel.Proficient">
                            <MudStack Direction="Row" Spacing="2" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Small" />
                                <MudText>Proficient (4-10 years)</MudText>
                            </MudStack>
                        </MudSelectItem>
                        <MudSelectItem Value="ExperienceLevel.Expert">
                            <MudStack Direction="Row" Spacing="2" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Size="Size.Small" />
                                <MudText>Expert (10+ years)</MudText>
                            </MudStack>
                        </MudSelectItem>
                    </MudSelect>
                    
                    <!-- Years of Experience -->
                    <div>
                        <MudText Typo="Typo.subtitle2" Class="mb-2">
                            Minimum Years of Experience: @_minYearsExperience years
                        </MudText>
                        <MudSlider T="int" 
                                 @bind-Value="_minYearsExperience"
                                 Min="0" Max="30" Step="1"
                                 Color="Color.Primary"
                                 aria-label="Minimum years of experience slider" />
                        <MudStack Direction="Row" Justify="Justify.SpaceBetween" Class="mt-1">
                            <MudText Typo="Typo.caption">0 years</MudText>
                            <MudText Typo="Typo.caption">30+ years</MudText>
                        </MudStack>
                    </div>
                    
                    <!-- Skills Categories -->
                    <MudExpansionPanels>
                        <MudExpansionPanel Text="⚙️ Technical Skills">
                            <MudChipSet MultiSelection="true" 
                                       @bind-SelectedValues="_technicalSkills"
                                       Filter="true">
                                <MudChip T="string" Text="Software Development" Value="Software Development" />
                                <MudChip T="string" Text="System Administration" Value="System Administration" />
                                <MudChip T="string" Text="Database Management" Value="Database Management" />
                                <MudChip T="string" Text="DevOps" Value="DevOps" />
                                <MudChip T="string" Text="Machine Learning" Value="Machine Learning" />
                                <MudChip T="string" Text="API Design" Value="API Design" />
                                <MudChip T="string" Text="Microservices" Value="Microservices" />
                                <MudChip T="string" Text="Blockchain" Value="Blockchain" />
                            </MudChipSet>
                        </MudExpansionPanel>
                        
                        <MudExpansionPanel Text="👥 Leadership Skills">
                            <MudChipSet MultiSelection="true" 
                                       @bind-SelectedValues="_leadershipSkills"
                                       Filter="true">
                                <MudChip T="string" Text="Strategic Planning" Value="Strategic Planning" />
                                <MudChip T="string" Text="Team Management" Value="Team Management" />
                                <MudChip T="string" Text="Change Management" Value="Change Management" />
                                <MudChip T="string" Text="Executive Coaching" Value="Executive Coaching" />
                                <MudChip T="string" Text="Vendor Management" Value="Vendor Management" />
                                <MudChip T="string" Text="Budget Management" Value="Budget Management" />
                                <MudChip T="string" Text="Risk Management" Value="Risk Management" />
                                <MudChip T="string" Text="Stakeholder Management" Value="Stakeholder Management" />
                            </MudChipSet>
                        </MudExpansionPanel>
                        
                        <MudExpansionPanel Text="🏢 Industry Skills">
                            <MudChipSet MultiSelection="true" 
                                       @bind-SelectedValues="_industrySkills"
                                       Filter="true">
                                <MudChip T="string" Text="Financial Services" Value="Financial Services" />
                                <MudChip T="string" Text="Healthcare IT" Value="Healthcare IT" />
                                <MudChip T="string" Text="Retail Technology" Value="Retail Technology" />
                                <MudChip T="string" Text="Manufacturing Systems" Value="Manufacturing Systems" />
                                <MudChip T="string" Text="Government/Public Sector" Value="Government/Public Sector" />
                                <MudChip T="string" Text="Education Technology" Value="Education Technology" />
                                <MudChip T="string" Text="Media &amp; Entertainment" Value="Media &amp; Entertainment" />
                                <MudChip T="string" Text="Real Estate Technology" Value="Real Estate Technology" />
                            </MudChipSet>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </MudStack>
            </MudExpansionPanel>
        </MudExpansionPanels>
        
        <!-- Action Buttons -->
        <MudStack Direction="Row" Justify="Justify.SpaceBetween" Class="mt-4">
            <MudButton Variant="Variant.Outlined" 
                     OnClick="ResetFilters"
                     Disabled="@(_activeFilterCount == 0)"
                     StartIcon="@Icons.Material.Filled.Refresh">
                Reset
            </MudButton>
            <MudButton Variant="Variant.Filled" 
                     Color="Color.Primary" 
                     OnClick="ApplyFilters"
                     StartIcon="@Icons.Material.Filled.Search">
                Apply Filters
            </MudButton>
        </MudStack>
    </div>;

    protected override async Task OnInitializedAsync()
    {
        await DetectScreenSize();
        InitializeDataSources();
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Partners.Any())
        {
            _filteredCount = Partners.Count;
            UpdateDataSources();
        }
    }

    private async Task DetectScreenSize()
    {
        try
        {
            var windowWidth = await JSRuntime.InvokeAsync<int>("window.innerWidth");
            _isDesktop = windowWidth > 960;
        }
        catch
        {
            _isDesktop = true; // Default to desktop on error
        }
    }

    private void InitializeDataSources()
    {
        _availableStates = FilterService.GetAvailableStates(Partners);
        UpdateDataSources();
    }

    private async void UpdateDataSources()
    {
        // Extract unique cities from partners using FilterService
        _availableCities = await FilterService.SearchCitiesAsync(Partners, null, 1000);
            
        // Extract unique skills from partners using FilterService
        _availableSkills = await FilterService.SearchSkillsAsync(Partners, null, 1000);
    }

    private async Task<IEnumerable<string>> SearchCities(string value, CancellationToken cancellationToken = default)
    {
        var cities = await FilterService.SearchCitiesAsync(Partners, value, 10);
        return cities;
    }

    private async Task<IEnumerable<string>> SearchSkills(string value, CancellationToken cancellationToken = default)
    {
        var skills = await FilterService.SearchSkillsAsync(Partners, value, 15);
        return skills;
    }

    private void OnCityChanged(string? city)
    {
        _selectedCity = city;
        UpdateFilterCounts();
        _ = ApplyFilters();
    }

    private void UpdateFilterCounts()
    {
        _activeLocationFilters = 0;
        if (!string.IsNullOrEmpty(_selectedCity)) _activeLocationFilters++;
        if (!string.IsNullOrEmpty(_selectedState)) _activeLocationFilters++;
        if (_selectedRegions.Any()) _activeLocationFilters++;

        _activeSkillsFilters = 0;
        if (_selectedSkills.Any() || _quickSelectSkills.Any()) _activeSkillsFilters++;
        if (_minExperienceLevel.HasValue) _activeSkillsFilters++;
        if (_minYearsExperience > 0) _activeSkillsFilters++;
        if (_technicalSkills.Any() || _leadershipSkills.Any() || _industrySkills.Any()) _activeSkillsFilters++;

        _activeFilterCount = _activeLocationFilters + 
                           (_selectedAvailability.HasValue ? 1 : 0) + 
                           _activeSkillsFilters;
    }

    private async Task ApplyFilters()
    {
        var criteria = BuildFilterCriteria();
        var filteredPartners = await FilterPartners(criteria);
        
        _filteredCount = filteredPartners.Count;
        UpdateFilterCounts();
        
        await OnFiltersChanged.InvokeAsync(filteredPartners);
        await OnFilterCriteriaChanged.InvokeAsync(criteria);
        
        StateHasChanged();
    }

    private PartnerFilterCriteria BuildFilterCriteria()
    {
        var allSelectedSkills = new List<string>();
        allSelectedSkills.AddRange(_selectedSkills);
        allSelectedSkills.AddRange(_quickSelectSkills);
        allSelectedSkills.AddRange(_technicalSkills);
        allSelectedSkills.AddRange(_leadershipSkills);
        allSelectedSkills.AddRange(_industrySkills);
        
        return new PartnerFilterCriteria
        {
            Cities = !string.IsNullOrEmpty(_selectedCity) ? new List<string> { _selectedCity } : null,
            States = !string.IsNullOrEmpty(_selectedState) ? new List<string> { _selectedState } : null,
            Regions = _selectedRegions.Any() ? _selectedRegions.ToList() : null,
            Availability = _selectedAvailability,
            RequiredSkills = allSelectedSkills.Distinct().ToList(),
            MinExperienceLevel = _minExperienceLevel,
            MinYearsExperience = _minYearsExperience > 0 ? _minYearsExperience : null
        };
    }

    private async Task<List<Partner>> FilterPartners(PartnerFilterCriteria criteria)
    {
        return await FilterService.FilterPartnersAsync(Partners, criteria);
    }

    private string GetPartnerRegion(string? state)
    {
        return FilterService.GetPartnerRegion(state);
    }

    private RenderFragment RenderActiveFilterChips() => @<div>
        @if (!string.IsNullOrEmpty(_selectedCity))
        {
            <MudChip T="string" Color="Color.Info" Size="Size.Small" OnClose="@(() => { _selectedCity = null; _ = ApplyFilters(); })">
                📍 @_selectedCity
            </MudChip>
        }
        @if (!string.IsNullOrEmpty(_selectedState))
        {
            <MudChip T="string" Color="Color.Info" Size="Size.Small" OnClose="@(() => { _selectedState = null; _ = ApplyFilters(); })">
                📍 @_selectedState
            </MudChip>
        }
        @if (_selectedRegions.Any())
        {
            @foreach (var region in _selectedRegions)
            {
                <MudChip T="string" Color="Color.Info" Size="Size.Small" OnClose="@(() => RemoveRegion(region))">
                    🌎 @GetRegionDisplayName(region)
                </MudChip>
            }
        }
        @if (_selectedAvailability.HasValue)
        {
            <MudChip T="string" Color="Color.Success" Size="Size.Small" OnClose="@(() => { _selectedAvailability = null; _ = ApplyFilters(); })">
                📅 @GetAvailabilityDisplayName(_selectedAvailability.Value)
            </MudChip>
        }
        @foreach (var skill in _selectedSkills.Concat(_quickSelectSkills).Concat(_technicalSkills).Concat(_leadershipSkills).Concat(_industrySkills).Distinct().Take(3))
        {
            <MudChip T="string" Color="Color.Primary" Size="Size.Small" OnClose="@(() => RemoveSkill(skill))">
                🎯 @skill
            </MudChip>
        }
    </div>;

    private void RemoveRegion(string region)
    {
        _selectedRegions = _selectedRegions.Where(r => r != region);
        _ = ApplyFilters();
    }

    private void RemoveSkill(string skill)
    {
        _selectedSkills = _selectedSkills.Where(s => s != skill);
        _quickSelectSkills = _quickSelectSkills.Where(s => s != skill);
        _technicalSkills = _technicalSkills.Where(s => s != skill);
        _leadershipSkills = _leadershipSkills.Where(s => s != skill);
        _industrySkills = _industrySkills.Where(s => s != skill);
        _ = ApplyFilters();
    }

    private string GetRegionDisplayName(string region) => region switch
    {
        "west-coast" => "West Coast",
        "east-coast" => "East Coast", 
        "midwest" => "Midwest",
        "south" => "South",
        _ => "Other"
    };

    private string GetAvailabilityDisplayName(AvailabilityTimeframe availability) => availability switch
    {
        AvailabilityTimeframe.ThisWeek => "This Week",
        AvailabilityTimeframe.NextWeek => "Next Week",
        AvailabilityTimeframe.ThisMonth => "This Month",
        _ => "Any Time"
    };

    private async Task ClearAllFilters()
    {
        _selectedCity = null;
        _selectedState = null;
        _selectedRegions = new HashSet<string>();
        _selectedAvailability = null;
        _selectedSkills = new HashSet<string>();
        _quickSelectSkills = new HashSet<string>();
        _minExperienceLevel = null;
        _minYearsExperience = 0;
        _technicalSkills = new HashSet<string>();
        _leadershipSkills = new HashSet<string>();
        _industrySkills = new HashSet<string>();
        
        await ApplyFilters();
        _mobileDrawerOpen = false;
    }

    private async Task ResetFilters() => await ClearAllFilters();

    #pragma warning restore CS8618
}