@using FxExpert.Blazor.Client.Services
@using FxExpert.Blazor.Client.Models
@inject IStripePaymentService StripeService
@inject IPaymentConfigurationService PaymentConfigService
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<style>
    /* Mobile Optimizations for Payment Form */
    @@media (max-width: 600px) {
        .payment-form-mobile {
            padding: 12px !important;
        }
        
        .payment-element-mobile {
            margin: 12px 0;
        }
        
        .payment-button-mobile {
            margin-top: 16px;
            min-height: 48px;
        }
        
        .payment-info-mobile {
            font-size: 0.875rem;
            margin-bottom: 12px;
        }
    }
</style>

<MudPaper Elevation="3" Class="pa-4 payment-form-mobile">
    <MudText Typo="Typo.h5" Class="mb-4">Payment Information</MudText>
    
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="mb-3">
            @ErrorMessage
        </MudAlert>
    }

    @if (IsLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate />
        <MudText Typo="Typo.body2" Align="Align.Center" Class="my-4">Setting up secure payment...</MudText>
    }
    else if (!string.IsNullOrEmpty(ClientSecret))
    {
        <MudStack>
            <MudText Typo="Typo.body1" Class="mb-3">
                <b>Amount:</b> $@Amount.ToString("F2")
            </MudText>
            
            <MudText Typo="Typo.body2" Class="mb-4 payment-info-mobile">
                Enter your payment information below. Your card will be authorized for $@Amount.ToString("F2") but not charged until your consultation is complete.
            </MudText>

            <!-- Stripe payment element will be mounted here -->
            <!-- Only render when we have a ClientSecret to ensure proper timing -->
            @if (!string.IsNullOrEmpty(ClientSecret))
            {
                <div id="@PaymentElementId" class="stripe-payment-element payment-element-mobile" style="min-height: 200px; border: 1px solid #e0e0e0; border-radius: 4px; background-color: #fff;"></div>
            }

            <MudButton Variant="Variant.Filled"
                       Color="Color.Success"
                       FullWidth
                       OnClick="ProcessPayment"
                       Disabled="IsProcessing"
                       Size="Size.Large"
                       Class="mt-4 payment-button-mobile">
                @if (IsProcessing)
                {
                    <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate/>
                    <span>Processing Payment...</span>
                }
                else
                {
                    <span>Authorize Payment</span>
                }
            </MudButton>
        </MudStack>
    }
</MudPaper>

@code {
    [Parameter] public decimal Amount { get; set; }
    [Parameter] public EventCallback<PaymentAuthorizationResult> OnPaymentAuthorized { get; set; }
    
    private string PaymentElementId = $"payment-element-{Guid.NewGuid():N}";
    private string? ClientSecret;
    private string? PaymentIntentId;
    private bool IsLoading = true;
    private bool IsProcessing = false;
    private string? ErrorMessage;
    private bool _paymentFormCreated = false;

    protected override async Task OnInitializedAsync()
    {
        await SetupPayment();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Only create payment form after DOM is rendered and we have ClientSecret
        if (!string.IsNullOrEmpty(ClientSecret) && !_paymentFormCreated && !IsLoading)
        {
            await CreatePaymentForm();
        }
    }

    private async Task SetupPayment()
    {
        try
        {
            IsLoading = true;
            ErrorMessage = null;

            // Get publishable key from configuration
            var publishableKey = await PaymentConfigService.GetStripePublishableKeyAsync();
            
            if (string.IsNullOrEmpty(publishableKey))
            {
                ErrorMessage = "Payment system not configured. Please try again later.";
                return;
            }

            // Initialize Stripe with publishable key
            var stripeInitialized = await StripeService.InitializeAsync(publishableKey);
            
            if (!stripeInitialized)
            {
                ErrorMessage = "Failed to initialize payment system. Please try again.";
                return;
            }

            // Create payment intent on backend
            var eventServerClient = HttpClientFactory.CreateClient("EventServer");
            var response = await eventServerClient.PostAsJsonAsync("/payments/create-intent", new
            {
                Amount = Amount,
                Currency = "usd"
            });

            if (!response.IsSuccessStatusCode)
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Failed to setup payment: {errorContent}";
                return;
            }

            var paymentIntent = await response.Content.ReadFromJsonAsync<CreatePaymentIntentResponse>();
            if (paymentIntent == null)
            {
                ErrorMessage = "Invalid payment response from server.";
                return;
            }

            PaymentIntentId = paymentIntent.PaymentIntentId;
            ClientSecret = paymentIntent.ClientSecret;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Payment setup failed: {ex.Message}";
            Console.WriteLine($"Payment setup error: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task CreatePaymentForm()
    {
        try
        {
            Console.WriteLine($"Creating payment form - Element ID: {PaymentElementId}");
            
            var formCreated = await StripeService.CreatePaymentFormAsync(PaymentElementId, ClientSecret!);
            
            if (formCreated)
            {
                _paymentFormCreated = true;
                Console.WriteLine("Payment form created successfully");
            }
            else
            {
                ErrorMessage = "Failed to create payment form. Please refresh and try again.";
                Console.WriteLine($"Payment form creation failed - Element ID: {PaymentElementId}");
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Payment form creation failed: {ex.Message}";
            Console.WriteLine($"Payment form creation error: {ex.Message}");
        }
        
        StateHasChanged();
    }

    private async Task ProcessPayment()
    {
        try
        {
            IsProcessing = true;
            ErrorMessage = null;

            // Confirm payment with Stripe - use current page URL as return URL
            var returnUrl = NavigationManager.Uri;
            var result = await StripeService.ConfirmPaymentAsync(returnUrl);
            
            if (!result.Success)
            {
                ErrorMessage = result.Error ?? "Payment authorization failed. Please try again.";
                return;
            }

            // Notify parent component of successful authorization
            await OnPaymentAuthorized.InvokeAsync(new PaymentAuthorizationResult
            {
                Success = true,
                PaymentIntentId = result.PaymentIntentId ?? PaymentIntentId,
                Status = result.Status
            });
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Payment processing failed: {ex.Message}";
            Console.WriteLine($"Payment processing error: {ex.Message}");
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }


    public async ValueTask DisposeAsync()
    {
        try
        {
            await StripeService.DestroyAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error disposing payment form: {ex.Message}");
        }
    }

    private record CreatePaymentIntentResponse(string PaymentIntentId, string ClientSecret);
}

<style>
    .stripe-payment-element {
        border: 1px solid #e0e0e0;
        border-radius: 4px;
        padding: 16px;
        background-color: #fff;
    }
</style>