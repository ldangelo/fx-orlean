@page "/confirmation/{PartnerEmail}"
@page "/confirmation/{PartnerEmail}/{BookingId}"
@using System.Text.Json
@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager


<PageTitle>Booking Confirmation</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="py-8">
    <MudPaper Elevation="3" Class="pa-6 text-center">
        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Large" Class="mb-4"
                 Style="width: 80px; height: 80px;"/>

        <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-4">Consultation Scheduled!</MudText>

        <MudText Typo="Typo.body1" Class="mb-6">
            Your consultation with @(_partner?.GetFullName() ?? "the expert") has been confirmed.
            You will receive a calendar invitation shortly with meeting details.
        </MudText>

        <MudDivider Class="my-6"/>

        <MudText Typo="Typo.h5" Class="mb-4">Meeting Details</MudText>

        <MudList T="string" Dense="false">
            <MudListItem Icon="@Icons.Material.Filled.Person">
                <MudText Typo="Typo.body1"><b>Expert:</b> @(_partner?.GetFullName() ?? "Your selected expert")
                </MudText>
            </MudListItem>

            @if (!string.IsNullOrEmpty(_bookingDetails?.ConsultationTopic))
            {
                <MudListItem Icon="@Icons.Material.Filled.Topic">
                    <MudText Typo="Typo.body1"><b>Topic:</b> @_bookingDetails.ConsultationTopic</MudText>
                </MudListItem>
            }

            <MudListItem Icon="@Icons.Material.Filled.CalendarToday">
                <MudText Typo="Typo.body1">
                    <b>Date & Time:</b> 
                    @if (_bookingDetails != null)
                    {
                        <text>@_bookingDetails.StartTime.ToString("dddd, MMMM d, yyyy") at @_bookingDetails.StartTime.ToString("h:mm tt") EST</text>
                    }
                    else
                    {
                        <text>@DateTime.Now.AddDays(3).ToString("dddd, MMMM d, yyyy") at 10:00 AM EST</text>
                    }
                </MudText>
            </MudListItem>

            <MudListItem Icon="@Icons.Material.Filled.VideoCall">
                <MudText Typo="Typo.body1">
                    <b>Meeting Link:</b> 
                    @if (!string.IsNullOrEmpty(_bookingDetails?.GoogleMeetLink))
                    {
                        <a href="@_bookingDetails.GoogleMeetLink" target="_blank">Join Google Meet</a>
                    }
                    else
                    {
                        <text>A Google Meet link will be included in your calendar invitation</text>
                    }
                </MudText>
            </MudListItem>

            <MudListItem Icon="@Icons.Material.Filled.Timer">
                <MudText Typo="Typo.body1"><b>Duration:</b> 60 minutes</MudText>
            </MudListItem>

            <MudListItem Icon="@Icons.Material.Filled.CreditCard">
                <MudText Typo="Typo.body1">
                    <b>Payment:</b> 
                    @if (_bookingDetails != null)
                    {
                        @($"${_bookingDetails.SessionFee:F2} (authorized - will be captured after the meeting)")
                    }
                    else
                    {
                        @("$800.00 (authorized - will be captured after the meeting)")
                    }
                </MudText>
            </MudListItem>
        </MudList>

        <MudPaper Elevation="0" Class="pa-4 my-6"
                  Style="background-color: #f5f5f5; border-left: 4px solid var(--mud-palette-success);">
            <MudText Typo="Typo.body2">
                <b>Preparation tip:</b> To make the most of your consultation, prepare specific questions and any
                relevant documents
                you'd like to discuss during the meeting.
            </MudText>
        </MudPaper>

        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Size="Size.Large"
                   OnClick="@(() => NavigationManager.NavigateTo("/"))"
                   Class="mt-4">
            Return to Home
        </MudButton>
    </MudPaper>
</MudContainer>

@code {
    [Parameter] public string PartnerEmail { get; set; } = string.Empty;
    [Parameter] public string? BookingId { get; set; }

    private Partner? _partner;
    private BookingDetails? _bookingDetails;

    protected override async Task OnInitializedAsync()
    {
        var email = Uri.UnescapeDataString(PartnerEmail);

        if (!string.IsNullOrEmpty(email))
        {
            try
            {
                var response = await Http.GetAsync($"/partners/{email}");

                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    _partner = JsonSerializer.Deserialize<Partner>(
                        content,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
                    );
                }

                // For demo purposes, create sample data if API call fails
                if (_partner == null)
                {
                    _partner = new Partner
                    {
                        EmailAddress = email,
                        FirstName = "John",
                        LastName = "Smith",
                        Title = "Chief Technology Officer"
                    };
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading partner data: {ex.Message}");
            }
        }

        // Load booking details if booking ID is provided
        if (!string.IsNullOrEmpty(BookingId) && Guid.TryParse(BookingId, out var bookingGuid))
        {
            try
            {
                var eventServerClient = HttpClientFactory.CreateClient("EventServer");
                var bookingResponse = await eventServerClient.GetAsync($"/api/bookings/{bookingGuid}");
                
                if (bookingResponse.IsSuccessStatusCode)
                {
                    var bookingContent = await bookingResponse.Content.ReadAsStringAsync();
                    _bookingDetails = JsonSerializer.Deserialize<BookingDetails>(
                        bookingContent,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
                    );
                    
                    Console.WriteLine($"Loaded booking details: {bookingContent}");
                }
                else
                {
                    Console.WriteLine($"Failed to load booking details: {bookingResponse.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading booking data: {ex.Message}");
            }
        }
    }

    public class BookingDetails
    {
        public Guid BookingId { get; set; }
        public Guid ConferenceId { get; set; }
        public string ClientEmail { get; set; } = string.Empty;
        public string PartnerEmail { get; set; } = string.Empty;
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string ConsultationTopic { get; set; } = string.Empty;
        public string ClientProblemDescription { get; set; } = string.Empty;
        public string PaymentIntentId { get; set; } = string.Empty;
        public string GoogleCalendarEventId { get; set; } = string.Empty;
        public string GoogleMeetLink { get; set; } = string.Empty;
        public decimal SessionFee { get; set; }
        public decimal PartnerPayout { get; set; }
        public decimal PlatformFee { get; set; }
        public string Status { get; set; } = "Confirmed";
    }

}
