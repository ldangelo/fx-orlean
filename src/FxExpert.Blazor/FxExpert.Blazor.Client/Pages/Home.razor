@page "/"
@rendermode InteractiveServer

<PageTitle>Fortium Expert Connect</PageTitle>

<style>
    .hero-section {
        background-color: #0055a4;
        padding: 40px 0;
        color: white;
    }

    .form-card {
        border-radius: 5px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
    }

    .footer {
        background-color: #f8f9fa;
        padding: 10px 0;
        text-align: center;
        margin-top: 20px;
    }

    .partner-card {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        border-radius: 12px;
    }

    .partner-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);
    }

    .text-muted {
        color: var(--mud-palette-text-secondary) !important;
    }

    /* Mobile Optimizations */
    @@media (max-width: 600px) {
        .hero-section {
            padding: 24px 0;
        }
        
        .hero-section h3 {
            font-size: 1.5rem;
            line-height: 1.4;
        }
        
        .hero-section .subtitle1 {
            font-size: 1rem;
        }
        
        .partner-card {
            margin-bottom: 16px;
        }
        
        .form-card {
            margin: 16px 8px;
        }
        
        .partner-card .mud-card-header {
            padding: 12px;
        }
        
        .partner-card .mud-card-content {
            padding: 8px 12px;
        }
        
        .partner-card .mud-card-actions {
            padding: 8px 12px;
        }
    }

    @@media (min-width: 601px) and (max-width: 960px) {
        .partner-card {
            margin-bottom: 16px;
        }
    }

    /* Touch-friendly buttons on mobile */
    @@media (max-width: 600px) {
        .mobile-touch-friendly .mud-button {
            min-height: 48px;
            font-size: 1rem;
        }
        
        .mobile-touch-friendly .mud-button-root {
            padding: 12px 24px;
        }
        
        .mobile-enhanced-spacing {
            margin-bottom: 16px;
        }
        
        .mobile-reduced-padding {
            padding: 8px;
        }
    }
</style>

<!-- Hero Section -->

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="px-0 hero-section">
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudText Typo="Typo.h3" Class="mb-2">Find Your Fractional CIO, CTO, or CISO</MudText>
        <MudText Typo="Typo.subtitle1" Class="mb-6">
            Describe your challenge, and we'll match you with the right expert
        </MudText>
    </MudContainer>
</MudContainer>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">
    <!-- Main Form Area -->
    <MudPaper Elevation="3" Class="pa-6 form-card mobile-reduced-padding">
        <MudText Typo="Typo.h5" Class="mb-4">What challenge can we help you with?</MudText>

        <EditForm Model="@(this)" Class="mt-3">
            <!-- Problem Statement Box -->
            <MudTextField @bind-Value="problemDescription"
                          ShrinkLabel
                          Variant="Variant.Outlined"
                          FullWidth
                          Lines="5"
                          Placeholder="Describe your business challenge, technical needs, or leadership requirements..."
                          Class="mb-4"/>

            <MudGrid>
                <!-- Optional Fields -->
                <MudItem xs="12" md="6">
                    <MudSelect T="string"
                               @bind-Value="Industry"
                               ShrinkLabel
                               Label="Industry (Optional)"
                               Variant="Variant.Outlined"
                               FullWidth
                               Class="mb-3">
                        <MudSelectItem Value=@("Financial Services")>Financial Services</MudSelectItem>
                        <MudSelectItem Value=@("Healthcare")>Healthcare</MudSelectItem>
                        <MudSelectItem Value=@("Retail")>Retail</MudSelectItem>
                        <MudSelectItem Value=@("Manufacturing")>Manufacturing</MudSelectItem>
                        <MudSelectItem Value=@("Technology")>Technology</MudSelectItem>
                        <MudSelectItem Value=@("Other")>Other</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect T="string" @bind-Value="Priority" ShrinkLabel Label="Urgency (Optional)"
                               Variant="Variant.Outlined"
                               FullWidth
                               Class="mb-3">
                        <MudSelectItem Value=@("High")>High - Need solution within days</MudSelectItem>
                        <MudSelectItem Value=@("Medium")>Medium - Need solution within weeks</MudSelectItem>
                        <MudSelectItem Value=@("Low")>Low - Planning ahead</MudSelectItem>
                    </MudSelect>
                </MudItem>
            </MudGrid>

            <!-- AI Matching Options -->
            <MudStack Direction="Row" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-3">
                <MudSwitch @bind-Value="useEnhancedMatching" 
                          Label="Enhanced AI Matching"
                          Color="Color.Primary"
                          ThumbIcon="@Icons.Material.Filled.Psychology" />
                <MudText Typo="Typo.caption" Class="text-muted">
                    @(useEnhancedMatching ? "Advanced AI with session history analysis" : "Standard AI matching")
                </MudText>
            </MudStack>

            <!-- Submit Button -->
            <div class="d-flex justify-end mt-4 mobile-touch-friendly">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Success"
                           Size="Size.Large"
                           OnClick="SubmitProblem"
                           Disabled="isBusy"
                           Class="py-2 px-4 mobile-enhanced-spacing"
                           FullWidth>
                    @if (isBusy)
                    {
                        <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate/>
                        <span>Finding Experts...</span>
                    }
                    else
                    {
                        <span>Find Expert</span>
                    }
                </MudButton>
            </div>
        </EditForm>
    </MudPaper>

    <!-- Enhanced AI Matching Results -->
    @if (useEnhancedMatching && !string.IsNullOrWhiteSpace(problemDescription))
    {
        <div class="mt-4">
            <EnhancedPartnerMatchingComponent ProblemDescription="@problemDescription"
                                            Industry="@Industry"
                                            Priority="@Priority"
                                            UseEnhancedMatching
                                            OnViewPartner="@OnEnhancedViewPartner" />
        </div>
    }

    @if (partners.Count > 0 && !useEnhancedMatching)
    {
        <MudDivider Class="my-6"/>
        
        <!-- Results Header with Filter Toggle -->
        <MudStack Direction="Row" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
            <MudStack Direction="Row" AlignItems="AlignItems.Center" Spacing="2">
                <MudText Typo="Typo.h4">Recommended Experts</MudText>
                <MudChip T="string" Color="Color.Info" Size="Size.Small">@filteredPartners.Count of @partners.Count experts</MudChip>
                @if (hasActiveFilters)
                {
                    <MudChip T="string" Color="Color.Primary" Size="Size.Small">Filtered</MudChip>
                }
            </MudStack>
            
            <!-- Mobile Filter Toggle Button -->
            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                <MudButton Variant="Variant.Outlined" 
                          StartIcon="@Icons.Material.Filled.FilterList"
                          OnClick="@(() => showMobileFilters = !showMobileFilters)">
                    @(showMobileFilters ? "Hide Filters" : "Show Filters")
                </MudButton>
            </MudHidden>
        </MudStack>

        <!-- Results Layout with Filter Sidebar -->
        <MudGrid>
            <!-- Desktop Filter Sidebar -->
            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <MudItem xs="12" md="3">
                    <PartnerFilterComponent Partners="@partners" 
                                          OnFiltersChanged="OnFiltersChanged"
                                          OnFilterCriteriaChanged="OnFilterCriteriaChanged" />
                </MudItem>
            </MudHidden>
            
            <!-- Partner Results -->
            <MudItem xs="12" md="@(showMobileFilters ? 12 : 9)">
                <!-- Mobile Filter Section -->
                <MudHidden Breakpoint="Breakpoint.MdAndUp">
                    @if (showMobileFilters)
                    {
                        <MudPaper Class="pa-4 mb-4" Elevation="2">
                            <PartnerFilterComponent Partners="@partners" 
                                                  OnFiltersChanged="OnFiltersChanged"
                                                  OnFilterCriteriaChanged="OnFilterCriteriaChanged" />
                        </MudPaper>
                    }
                </MudHidden>
                
                <!-- Sort Options -->
                <MudStack Direction="Row" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-3">
                    <MudText Typo="Typo.subtitle2" Class="text-muted">
                        @if (hasActiveFilters)
                        {
                            <span>Showing @filteredPartners.Count filtered results</span>
                        }
                        else
                        {
                            <span>AI-ranked results based on your problem statement</span>
                        }
                    </MudText>
                    
                    <MudSelect T="PartnerSortOption" 
                             Value="@currentSortOption" 
                             ValueChanged="OnSortChanged"
                             Label="Sort by"
                             Variant="Variant.Outlined"
                             Margin="Margin.Dense"
                             Style="min-width: 150px;">
                        <MudSelectItem Value="PartnerSortOption.Relevance">AI Relevance</MudSelectItem>
                        <MudSelectItem Value="PartnerSortOption.Name">Name</MudSelectItem>
                        <MudSelectItem Value="PartnerSortOption.Location">Location</MudSelectItem>
                        <MudSelectItem Value="PartnerSortOption.Experience">Experience</MudSelectItem>
                        <MudSelectItem Value="PartnerSortOption.Availability">Availability</MudSelectItem>
                        <MudSelectItem Value="PartnerSortOption.Rate">Rate</MudSelectItem>
                    </MudSelect>
                </MudStack>

                <!-- Partner Cards -->
                @if (filteredPartners.Count > 0)
                {
                    <MudGrid>
                        @foreach (var partner in displayedPartners)
                        {
                            <MudItem xs="12" md="@(showMobileFilters ? 12 : 6)" lg="@(showMobileFilters ? 6 : 4)">
                                <MudCard Elevation="3" Class="h-100 partner-card">
                                    <MudCardHeader>
                                        <CardHeaderAvatar>
                                            <MudAvatar Color="Color.Primary">
                                                @(partner?.FirstName?.Substring(0, 1))@(partner?.LastName?.Substring(0, 1))
                                            </MudAvatar>
                                        </CardHeaderAvatar>
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.h6">@(partner?.GetFullName())</MudText>
                                            <MudText Typo="Typo.subtitle2">@(partner?.Title)</MudText>
                                            <MudText Typo="Typo.caption" Class="text-muted">
                                                <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" Class="mr-1"/>
                                                @(partner?.GetLocation())
                                            </MudText>
                                        </CardHeaderContent>
                                        <CardHeaderActions>
                                            <!-- Availability Indicator -->
                                            @{
                                                var availabilityColor = partner?.AvailabilityNext30Days switch
                                                {
                                                    >= 5 => Color.Success,
                                                    >= 3 => Color.Warning,
                                                    >= 1 => Color.Info,
                                                    _ => Color.Default
                                                };
                                                var availabilityText = partner?.AvailabilityNext30Days switch
                                                {
                                                    >= 5 => "Available This Week",
                                                    >= 3 => "Available Next Week", 
                                                    >= 1 => "Available This Month",
                                                    _ => "Limited Availability"
                                                };
                                            }
                                            <MudChip T="string" Size="Size.Small" Color="@availabilityColor" Variant="Variant.Text">
                                                @availabilityText
                                            </MudChip>
                                        </CardHeaderActions>
                                    </MudCardHeader>
                                    <MudCardContent>
                                        <!-- Contact Info -->
                                        <MudText Typo="Typo.body2" Class="mb-1">
                                            <MudIcon Icon="@Icons.Material.Filled.Email" Size="Size.Small" Class="mr-1"/>
                                            @(partner?.EmailAddress)
                                        </MudText>
                                        <MudText Typo="Typo.body2" Class="mb-3">
                                            <MudIcon Icon="@Icons.Material.Filled.Phone" Size="Size.Small" Class="mr-1"/>
                                            @(partner?.PrimaryPhone)
                                        </MudText>

                                        <!-- AI Matching Reason -->
                                        @if (!string.IsNullOrEmpty(partner?.Reason) && !hasActiveFilters)
                                        {
                                            <MudText Typo="Typo.body2" Style="font-weight: 500" Class="mb-2">
                                                <MudIcon Icon="@Icons.Material.Filled.Psychology" Size="Size.Small" Class="mr-1"/>
                                                Why this expert matches:
                                            </MudText>
                                            <MudText Typo="Typo.body2" Class="mb-3">@partner?.Reason</MudText>
                                        }

                                        <!-- Skills -->
                                        <MudText Typo="Typo.caption" Class="mb-1">Key Skills:</MudText>
                                        <MudChipSet T="string" Class="mb-2">
                                            @foreach (var skill in (partner?.Skills ?? new List<PartnerSkill>()).Take(4))
                                            {
                                                <MudChip Size="Size.Small" Color="Color.Primary" Variant="Variant.Outlined">
                                                    @skill.Skill
                                                    @if (skill.YearsOfExperience > 0)
                                                    {
                                                        <MudText Typo="Typo.caption" Class="ml-1">(@skill.YearsOfExperience yr)</MudText>
                                                    }
                                                </MudChip>
                                            }
                                            @if ((partner?.Skills?.Count ?? 0) > 4)
                                            {
                                                <MudChip Size="Size.Small" Color="Color.Default" Variant="Variant.Text">
                                                    +@((partner?.Skills?.Count ?? 0) - 4) more
                                                </MudChip>
                                            }
                                        </MudChipSet>

                                        <!-- Rate -->
                                        <MudText Typo="Typo.body2" Class="mt-2">
                                            <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Size="Size.Small" Class="mr-1"/>
                                            <strong>$@partner?.Rate/hour</strong>
                                        </MudText>
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudButton Variant="Variant.Text" Color="Color.Primary"
                                                   OnClick="@(() => ViewPartnerDetails(partner?.EmailAddress, problemDescription, Industry, Priority))">
                                            View Profile
                                        </MudButton>
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                                   EndIcon="@Icons.Material.Filled.CalendarToday">
                                            Schedule
                                        </MudButton>
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                }
                else
                {
                    <!-- No Results Message -->
                    <MudPaper Class="pa-8 text-center" Elevation="1">
                        <MudIcon Icon="@Icons.Material.Filled.FilterList" Size="Size.Large" Color="Color.Tertiary" Class="mb-3"/>
                        <MudText Typo="Typo.h6" Class="mb-2">No experts match your current filters</MudText>
                        <MudText Typo="Typo.body2" Class="text-muted mb-4">
                            Try adjusting your filter criteria to see more results
                        </MudText>
                        <MudButton Variant="Variant.Outlined" 
                                   OnClick="ClearAllFilters"
                                   StartIcon="@Icons.Material.Filled.Clear">
                            Clear All Filters
                        </MudButton>
                    </MudPaper>
                }
            </MudItem>
        </MudGrid>
    }

    <!-- Footer -->
    <div class="footer">
        <MudText Typo="Typo.body2" Color="Color.Dark">© 2025 Fortium Partners, LP</MudText>
    </div>
</MudContainer>

@using FxExpert.Blazor.Client.Components
@using FxExpert.Blazor.Client.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

@using FxExpert.Blazor.Client.Services
@inject FilterService FilterService

@code {
    private string problemDescription = string.Empty;
    private List<Partner> partners = new();
    private List<Partner> filteredPartners = new();
    private List<Partner> displayedPartners = new();
    private bool isBusy;
    private string Industry = string.Empty;
    private string Priority = string.Empty;
    private bool useEnhancedMatching = true; // Default to enhanced matching
    
    // Filter state
    private PartnerFilterCriteria currentFilters = new();
    private bool hasActiveFilters = false;
    private bool showMobileFilters = false;
    
    // Sorting state
    private PartnerSortOption currentSortOption = PartnerSortOption.Relevance;

    private async Task SubmitProblem()
    {
        Console.WriteLine("SubmitProblem called!");
        
        if (string.IsNullOrWhiteSpace(problemDescription))
        {
            Console.WriteLine("Problem description is empty");
            return;
        }

        Console.WriteLine($"Setting isBusy to true, problem: {problemDescription}");
        isBusy = true;
        try
        {
            // Only use legacy matching when enhanced matching is disabled
            if (!useEnhancedMatching)
            {
                var response = await Http.PostAsJsonAsync("/api/ai/partners", new { ProblemDescription = problemDescription });
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<List<Partner>>();
                    partners = result?.Where(p => p != null).ToList() ?? new List<Partner>();
                    
                    // Initialize filtered partners with all partners
                    await ApplyFilters();

                    Console.WriteLine($"Retrieved {partners.Count} partners.");
                }
                else
                {
                    Console.WriteLine($"Failed to retrieve partners. {response.ReasonPhrase}");
                }
            }
            // Enhanced matching is handled by the EnhancedPartnerMatchingComponent automatically
        }
        catch (Exception ex)
        {
            Console.WriteLine($"failed to retrieve partner: {ex.Message}");
        }
        finally
        {
            isBusy = false;
        }
    }

    private void ViewPartnerDetails(string? partnerEmail, string? problemDescription, string? problemIndustry, string? problemPriority)
    {
        if (!string.IsNullOrEmpty(partnerEmail))
        {
            var encodedEmail = Uri.EscapeDataString(partnerEmail);
            var encodedProblemDescription = Uri.EscapeDataString(problemDescription ?? string.Empty);
            var encodedProblemIndustry = Uri.EscapeDataString(problemIndustry ?? string.Empty);
            var encodedProblemPriority = Uri.EscapeDataString(problemPriority ?? string.Empty);
            NavigationManager.NavigateTo($"/partner/{encodedEmail}/{encodedProblemDescription}/{encodedProblemIndustry}/{encodedProblemPriority}");
        }
    }

    /// <summary>
    /// Event handler for enhanced AI partner matching component
    /// </summary>
    private async Task OnEnhancedViewPartner((string partnerId, string problemDescription, string industry, string priority) args)
    {
        ViewPartnerDetails(args.partnerId, args.problemDescription, args.industry, args.priority);
        await Task.CompletedTask;
    }

    /// <summary>
    /// Event handler when filters are changed - receives filtered partner list
    /// </summary>
    private async Task OnFiltersChanged(List<Partner> filteredPartnerList)
    {
        filteredPartners = filteredPartnerList ?? new List<Partner>();
        await ApplySorting();
        StateHasChanged();
    }

    /// <summary>
    /// Event handler when filter criteria changes - updates active filter state
    /// </summary>
    private async Task OnFilterCriteriaChanged(PartnerFilterCriteria criteria)
    {
        currentFilters = criteria;
        hasActiveFilters = HasActiveFilters(criteria);
        StateHasChanged();
    }

    /// <summary>
    /// Event handler for sort option changes
    /// </summary>
    private async Task OnSortChanged(PartnerSortOption sortOption)
    {
        currentSortOption = sortOption;
        await ApplySorting();
    }

    /// <summary>
    /// Applies current filters to the partner list
    /// </summary>
    private async Task ApplyFilters()
    {
        if (partners.Count == 0)
        {
            filteredPartners = new List<Partner>();
            displayedPartners = new List<Partner>();
            return;
        }

        // If no filters are active, show all partners
        if (!hasActiveFilters)
        {
            filteredPartners = partners.ToList();
        }
        else
        {
            filteredPartners = await FilterService.FilterPartnersAsync(partners, currentFilters);
        }

        await ApplySorting();
    }

    /// <summary>
    /// Applies current sorting to the filtered partners
    /// </summary>
    private async Task ApplySorting()
    {
        if (filteredPartners.Count == 0)
        {
            displayedPartners = new List<Partner>();
            return;
        }

        displayedPartners = FilterService.SortPartners(filteredPartners, currentSortOption, true);
        StateHasChanged();
    }

    /// <summary>
    /// Checks if any filters are currently active
    /// </summary>
    private bool HasActiveFilters(PartnerFilterCriteria criteria)
    {
        return (criteria.Cities?.Any() == true) ||
               (criteria.States?.Any() == true) ||
               (criteria.Regions?.Any() == true) ||
               (criteria.Availability.HasValue) ||
               (criteria.RequiredSkills?.Any() == true) ||
               (criteria.MinExperienceLevel.HasValue) ||
               (criteria.MinYearsExperience.HasValue && criteria.MinYearsExperience > 0);
    }

    /// <summary>
    /// Clears all filters and shows all partners
    /// </summary>
    private async Task ClearAllFilters()
    {
        currentFilters = new PartnerFilterCriteria();
        hasActiveFilters = false;
        showMobileFilters = false;
        await ApplyFilters();
    }

}
