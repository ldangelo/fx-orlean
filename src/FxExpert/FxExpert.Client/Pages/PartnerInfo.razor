@page "/partnerinfo"
@using System.Security.Claims
@using System.Text
@using MudExRichTextEditor
@using Newtonsoft.Json
@using Fortium.Types
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JsRuntime
@inject HttpClient Http
<PageTitle>Partner Info</PageTitle>

<AuthorizeView>
      <Authorized>
            @if (_partner == null)
            {
                  <p>Loading Partner Information</p>
            }
            else
            {
                  <PartnerCard Partner="@_partner"/>
                  <MudButtonGroup>
                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary"
                                   StartIcon="@Icons.Material.Filled.ContentCopy"
                                   OnClick="CopyMeetingUrlToClipboard">Copy Meeting Url
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Schedule"
                                   OnClick="ShowHideSchedule">Show Schedule
                        </MudButton>
                  </MudButtonGroup>

                  @if (_showScheduleComponent)
                  {
                        <ScheduleMeeting Partner="@_partner"/>
                  }
                  else
                  {
                        <MudExRichTextEdit @ref="@Editor" @bind-Value="@_partner.Bio"
                                           Height="444"
                                           Class="m-2"
                                           Variant="Variant.Outlined"/>
                  }
            }
      </Authorized>
      <NotAuthorized>
            <LoginComponent/>
      </NotAuthorized>
</AuthorizeView>

@code {
      MudExRichTextEdit? Editor;
      private bool _showScheduleComponent = false;
      private static ClaimsPrincipal? _user;
      private Partner? _partner;
      private string? _partnerOverview;
      private string? _meetingUrl;


      protected override async Task OnInitializedAsync()
      {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            _user = authState.User;

            if (authState.User.Identity is not null && authState.User.Identity.IsAuthenticated)
            {
                  var firstName = authState.User.FindFirst("given_name")?.Value;
                  var lastName = _user.FindFirst("family_name")?.Value;
                  var email = _user.FindFirst("email")?.Value;
                  var payload = new { Email = email }; // Create a payload object
                  var jsonPayload = JsonConvert.SerializeObject(payload); // Serialize object to JSON

                  var httpContent = new StringContent(jsonPayload, Encoding.UTF8, "application/json"); // Create HTTP conten
                  var response = await Http.PostAsync($"{Navigation.BaseUri}api/partnerinfo", httpContent);

                  var content = await response.Content.ReadAsStringAsync();
                  _partner = JsonConvert.DeserializeObject<Partner>(content);
                  _meetingUrl = Navigation.BaseUri + "meeting/" + email;
            }

            if (_partner != null)
            {
                  _partnerOverview = _partner.Bio;
            }
      }

      private async Task CopyMeetingUrlToClipboard()
      {
            await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _meetingUrl);
      }

      private void ShowHideSchedule(MouseEventArgs obj)
      {
            _showScheduleComponent = !_showScheduleComponent;
      }

      private void OnPartnerOverviewChanged(string? value)
      {
            if (_partner != null)
            {
                  _partner.Bio = value;
            }

            _partnerOverview = value;
      }

}
