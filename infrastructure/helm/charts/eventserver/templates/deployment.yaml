apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "eventserver.fullname" . }}
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "eventserver.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      {{- include "eventserver.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        prometheus.io/scrape: "{{ .Values.monitoring.enabled }}"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
      labels:
        {{- include "eventserver.selectorLabels" . | nindent 8 }}
        version: {{ .Values.image.tag | quote }}
    spec:
      serviceAccountName: {{ include "eventserver.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            # Application environment
            - name: ASPNETCORE_ENVIRONMENT
              value: {{ .Values.env.ASPNETCORE_ENVIRONMENT | quote }}
            - name: ASPNETCORE_URLS
              value: {{ .Values.env.ASPNETCORE_URLS | quote }}
            - name: TZ
              value: {{ .Values.env.TZ | quote }}
            - name: LOGGING_LEVEL
              value: {{ .Values.logging.level | quote }}
            
            # AWS configuration
            - name: AWS_REGION
              value: {{ .Values.aws.region | quote }}
            - name: AWS_DEFAULT_REGION
              value: {{ .Values.aws.region | quote }}
            
            # Database configuration from External Secret
            - name: DATABASE_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: host
            - name: DATABASE_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: port
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: dbname
            - name: DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: username
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: password
            - name: CONNECTION_STRING
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: connection_string
            
            # OpenAI configuration from External Secret
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalServices.openai.secretName }}
                  key: api_key
            
            # Stripe configuration from External Secret
            - name: STRIPE_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalServices.stripe.secretName }}
                  key: secret_key
            - name: STRIPE_PUBLISHABLE_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalServices.stripe.secretName }}
                  key: publishable_key
            - name: STRIPE_WEBHOOK_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalServices.stripe.secretName }}
                  key: webhook_secret
            
            # Google Calendar configuration from External Secret
            - name: GOOGLE_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalServices.google.secretName }}
                  key: client_id
            - name: GOOGLE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalServices.google.secretName }}
                  key: client_secret
            - name: GOOGLE_PROJECT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalServices.google.secretName }}
                  key: project_id
            
            # Keycloak configuration from External Secret
            - name: KEYCLOAK_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalServices.keycloak.secretName }}
                  key: admin_username
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalServices.keycloak.secretName }}
                  key: admin_password
            - name: KEYCLOAK_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalServices.keycloak.secretName }}
                  key: client_secret
          
          {{- if .Values.healthcheck.enabled }}
          livenessProbe:
            {{- toYaml .Values.healthcheck.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.healthcheck.readinessProbe | nindent 12 }}
          {{- end }}
          
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          
          volumeMounts:
            - name: config
              mountPath: /app/appsettings.json
              subPath: appsettings.json
              readOnly: true
            {{- range .Values.volumeMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              {{- if .readOnly }}
              readOnly: {{ .readOnly }}
              {{- end }}
            {{- end }}
      
      volumes:
        - name: config
          configMap:
            name: {{ include "eventserver.fullname" . }}
        {{- range .Values.volumes }}
        - name: {{ .name }}
          {{- if .emptyDir }}
          emptyDir: {}
          {{- else if .configMap }}
          configMap:
            name: {{ .configMap.name }}
          {{- else if .secret }}
          secret:
            secretName: {{ .secret.secretName }}
          {{- end }}
        {{- end }}
      
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}